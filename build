#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Copyright (c) 2018 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import os
import os.path
import re
import subprocess
import sys
import tempfile
import urllib.request

# The import path of the project:
IMPORT_PATH = "github.com/container-mgmt/messaging-library"

# The name and version of the project:
PROJECT_NAME = "messaging-library"
PROJECT_VERSION = "0.0.0"

# The list of tools that will be executed directly inside the Go environment
# but without parsing the command line. For example, if the script is invoked
# with these command line:
#
#   build dep ensure -v
#
# It will execute 'dep ensure -v' inside the go environment but it will not
# parse or process the 'ensure' and '-v' options.
DIRECT_TOOLS = [
  "dep",
  "go",
]

# The values extracted from the command line:
argv = None


def say(what):
    """
    Writes a message to the standard output, and then flushes it, so that
    the output doesn't appear out of order.
    """
    sys.stdout.write(what)
    sys.stdout.write("\n")
    sys.stdout.flush()


def cache(function):
    """
    A decorator that creates a cache for the results of a function, so that
    when the function is called the second time the result will be returned
    from the cache without actually executing it.
    """
    cache = dict()

    def helper(*key):
        try:
            value = cache[key]
        except KeyError:
            value = function(*key)
            cache[key] = value
        return value
    return helper


def find_paths(base, include=None, exclude=None):
    """
    Recursively finds the paths inside the 'base' directory whose complete
    names match the 'include' regular expression and don't match the 'exclude'
    regular expression. By default all paths are included and no path is
    excluded.
    """
    include_re = re.compile(include) if include else None
    exclude_re = re.compile(exclude) if exclude else None
    paths = []
    for root, _, names in os.walk(base):
        for name in names:
            path = os.path.join(root, name)
            path = os.path.abspath(path)
            should_include = include_re and include_re.search(path)
            should_exclude = exclude_re and exclude_re.search(path)
            if should_include and not should_exclude:
                paths.append(path)
    return paths


def go_tool(*args):
    """
    Executes a command with the 'GOPATH' environment variable pointing to the
    project specific path, and with the symbolic link as the working directory.
    The argument should be a list containing the complete command line to
    execute.
    """
    # Make sure that the required directories exist:
    go_path = ensure_go_path()
    project_dir = ensure_project_dir()
    project_link = ensure_project_link()

    # Modify the environment so that the Go tool will find the project files
    # using the `GOPATH` environment variable. Note that setting the `PWD`
    # environment is necessary, because the `cwd` is always resolved to a
    # real path by the operating system.
    env = dict(os.environ)
    env["GOPATH"] = go_path
    env["PWD"] = project_link

    # Run the Go tool and wait till it finishes:
    say("Running command '{args}'".format(args=" ".join(args)))
    process = subprocess.Popen(
        args=args,
        env=env,
        cwd=project_link,
    )
    result = process.wait()
    if result != 0:
        raise Exception("Command '{args}' failed with exit code {code}".format(
            args=" ".join(args),
            code=result,
        ))


@cache
def ensure_project_dir():
    say("Calculating project directory")
    return os.path.dirname(os.path.realpath(__file__))


@cache
def ensure_go_path():
    """
    Creates and returns the '.gopath' directory that will be used as the
    'GOPATH' for the project.
    """
    project_dir = ensure_project_dir()
    go_path = os.path.join(project_dir, '.gopath')
    if not os.path.exists(go_path):
        say('Creating Go path `{path}`'.format(path=go_path))
        os.mkdir(go_path)
    return go_path


@cache
def ensure_go_bin():
    """
    Creates and returns the Go 'bin' directory that will be used for the
    project.
    """
    go_path = ensure_go_path()
    go_bin = os.path.join(go_path, "bin")
    if not os.path.exists(go_bin):
        os.mkdir(go_bin)
    return go_bin


@cache
def ensure_go_pkg():
    """
    Creates and returns the Go 'pkg' directory that will be used for the
    project.
    """
    go_path = ensure_go_path()
    go_pkg = os.path.join(go_path, "pkg")
    if not os.path.exists(go_pkg):
        os.mkdir(go_pkg)
    return go_pkg


@cache
def ensure_go_src():
    """
    Creates and returns the Go 'src' directory that will be used for the
    project.
    """
    go_path = ensure_go_path()
    go_src = os.path.join(go_path, "src")
    if not os.path.exists(go_src):
        os.mkdir(go_src)
    return go_src


@cache
def ensure_src_link(import_path, src_path):
    """
    Creates the symbolik link that will be used to make the source for the
    given import path appear in the 'GOPATH' expected by go tools. Returns the
    full path of the link.
    """
    project_dir = ensure_project_dir()
    go_src = ensure_go_src()
    src_link = os.path.join(go_src, import_path)
    link_dir = os.path.dirname(src_link)
    if not os.path.exists(link_dir):
        os.makedirs(link_dir)
    if not os.path.exists(src_link):
        os.symlink(src_path, src_link)
    return src_link


@cache
def ensure_project_link():
    """
    Creates the symbolik link that will be used to make the project appear
    in the 'GOPATH' expected by go tools. Returns the full path of the link.
    """
    project_dir = ensure_project_dir()
    return ensure_src_link(IMPORT_PATH, project_dir)


@cache
def ensure_vendor_dir():
    """
    Creates and populates the 'vendor' directory if it doesn't exist yet.
    Returns the full path of the directory.
    """
    # Create and populate the vendor director if it doesn't exist:
    project_link = ensure_project_link()
    vendor_dir = os.path.join(project_link, "vendor")
    if not os.path.exists(vendor_dir):
        go_tool("dep", "ensure", "--vendor-only", "-v")

    # In order to compile the code of third party tools, like the Kubernetes
    # code generators, we need to have the vendor directory in one of the
    # ancestor of the directory that contains that code. A good way to solve
    # that is to create a link in the Go source directory, as it is an ancestor
    # of any package.
    go_src = ensure_go_src()
    vendor_link = os.path.join(go_src, "vendor")
    if not os.path.exists(vendor_link):
        os.symlink(vendor_dir, vendor_link)

    return vendor_dir


@cache
def ensure_packages():
    """
    Builds all the packages of the project.
    """
    # Make sure that the vendor directory is populated:
    ensure_vendor_dir()

    # Get the names of the subdirectories of the 'pkg' directory:
    project_dir = ensure_project_dir()
    pkg_dir = os.path.join(project_dir, 'pkg')
    pkg_names = []
    for pkg_name in os.listdir(pkg_dir):
        pkg_path = os.path.join(pkg_dir, pkg_name)
        if os.path.isdir(pkg_path):
            pkg_names.append(pkg_name)
    pkg_names.sort()

    # Build the packages:
    for pkg_name in pkg_names:
        say("Building package '%s'" % pkg_name)
        pkg_path = "{path}/pkg/{name}".format(path=IMPORT_PATH, name=pkg_name)
        go_tool("go", "install", pkg_path)


def build_packages():
    """
    Implements the 'packages' subcommand.
    """
    ensure_packages()


def main():
    # Create the top level command line parser:
    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description="A simple build tool, just for this project.",
    )
    parser.add_argument(
        "--verbose",
        help="Genenerate verbose output.",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--debug",
        help="Genenerate debug, very verbose, output.",
        default=False,
        action="store_true",
    )
    subparsers = parser.add_subparsers()

    # Create the parser for the 'packages' command:
    packages_parser = subparsers.add_parser("packages")
    packages_parser.set_defaults(func=build_packages)

    # Run the selected tool:
    code = 0
    try:
        if len(sys.argv) > 0 and sys.argv[1] in DIRECT_TOOLS:
            go_tool(*sys.argv[1:])
        else:
            global argv
            argv = parser.parse_args()
            if not hasattr(argv, "func"):
                parser.print_usage()
                code = 1
            argv.func()
    except Exception as error:
        say(str(error))

    # Bye:
    sys.exit(code)


if __name__ == "__main__":
    main()
